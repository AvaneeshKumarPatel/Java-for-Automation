Java Class and Object 

Class- Class is a basicaly template, Class used createing Objects 

// createing Class

pakege learingJava;

public class demo1
{
    // createing Objects
     public static void main (String[] args){
        Demo1 de = new Demo1();

        new Demo1();
        new Demo1();


    }
}

// prrr

pakege parcJava;

public class FirstProgram {
public static void main (String[] args){

    System.out.println("This is Our First Program")
}

}

// Single line comment 

/*multiline  

*comment
*/ 

// namingconventions 
https://www.oracle.com/java/technologies/javase/codeconventions-namingconventions.html


Naming Conventions In Java



IdentifierType	                                        Rules for Naming	                                    Examples

1. Packages                          The prefix of a unique package name is always written                        com.sun.eng
                                     in all-lowercase ASCII letters and should be one of the                   com.apple.quicktime.v2
                                     top-level domain names, currently com, edu, gov, mil, net, org,


2. Classes                           Class names should be nouns, in mixed case with the first                   class Raster;
                                     letter of each internal word capitalized                                   class ImageSprite    


3. Interfaces	                     Interface names should be capitalized like class names.	                 interface RasterDelegate;
                                                                                                                interface Storing;


4. Methods	                         Methods should be verbs, in mixed case with the first letter                 run();
                                     lowercase, with the first letter of each internal word capitalized.            getBackground();                                                                     runFast();
                                                                                                                     runFast();


5. Variables                    Except for variables, all instance, class, and class constants are in               int             i;
                                mixed case with a lowercase first letter. Internal words start with capital         char            c;
                                etters. Variable names should not start with underscore _ or dollar sign $          float           myWidth;
                                characters, even though both are allowed.



DATA TYPE IN Java

Primitive DATA TYPE - byte, short, int, long ,float, double,boolean, and char

Non-Primitive type - String, Arrays,



Examples  DATA TYPE;

package learingJava;

public Class DTDemo{

    public static void main( String[] args) {
    byte bt = - 128;
    short sht = 32767;
    int myInt = 764765;
    long lng = 324893L;


    float myFloat = 1.3423f;
    double myDouble =1.32434d


    boolean bool = false;
    char  ch = 's';

DTDemo dtd = new DTDemo();

String str = new String();

String str1 = "This is stirng";

    }
}






// type of variablename = value;

int myNumber = 23;
char ch = 'A';
String str1 = "hello";




Summary of Operators
The following quick reference summarizes the operators supported by the Java programming language.

Simple Assignment Operator
=       Simple assignment operator

Arithmetic Operators
+       Additive operator (also used
        for String concatenation)
-       Subtraction operator
*       Multiplication operator
/       Division operator
%       Remainder operator


Unary Operators
+       Unary plus operator; indicates
        positive value (numbers are 
        positive without this, however)
-       Unary minus operator; negates
        an expression
++      Increment operator; increments
        a value by 1
--      Decrement operator; decrements
        a value by 1
!       Logical complement operator;
        inverts the value of a boolean


Equality and Relational Operators
==      Equal to
!=      Not equal to
>       Greater than
>=      Greater than or equal to
<       Less than
<=      Less than or equal to


Conditional Operators
&&      Conditional-AND
||      Conditional-OR
?:      Ternary (shorthand for 
        if-then-else statement)


Type Comparison Operator
instanceof       Compares an object to 
                a specified type 




Bitwise and Bit Shift Operators
~       Unary bitwise complement
<<      Signed left shift
>>      Signed right shift
>>>     Unsigned right shift
&       Bitwise AND
^       Bitwise exclusive OR
|       Bitwise inclusive OR





//  if, else if, 



package practicejava;

public class PracticeJava {

	public static void main(String[] args)

	{

		int i = 10;

		if (i < 9) {

			System.out.println("Das se chota hai");
		} else {

			System.out.println("Aise he print kkr do");
		}

	}
}



// Nested if else if 


 package practicejava;

public class PracticeJava {

	public static void main(String[] args)  {

	
	 int num1 = 40;
	 int num2 = 20;
	 int num3 = 30;
	 
	  if(num1  > num2 ) {
		  	
		  System.out.println("Number1 is greater than number 2");
		  
		  
		if(num2<num3) {
			
			System.out.println("Inside Nested if, Jo bhe result hai print kar do  ");
		}
		else {
			System.out.println("Nested else inside block");
		}
		
	  }
	  
		
	}
}	





//  Ternary Operator 

 Syntex=>
// variable =  (condition) ? TrueExpression : FalseExpression 
		

Examples:- 



package practicejava;

public class TernaryOperator {

	
	public static void main(String[] args) {
		
		
		// variable =  (condition) ? TrueExpression : FalseExpression 
		
		int num1 = 20;
        int num2 = 40;
        
        String bigValue = (num2 < num1) ? "Nmuber 2 bada hai Number 1 se " : "Nhe bada hai" ;



 Java Switch Statements

Syntex Swith case 

switch(expression) {
  case x:
    // code block
    break;
  case y:
    // code block
    break;
  default:
    // code block
}




Examples:-


int day = 4;
switch (day) {
  case 1:
    System.out.println("Monday");
    break;
  case 2:
    System.out.println("Tuesday");
    break;
  case 3:
    System.out.println("Wednesday");
    break;
  case 4:
    System.out.println("Thursday");
    break;
  case 5:
    System.out.println("Friday");
    break;
  case 6:
    System.out.println("Saturday");
    break;
  case 7:
    System.out.println("Sunday");
    break;
}

-----------------------------
DAy-5, SDET 
----------------------------------
Looping/Iterative statement
--------------------------------

while loop
do while loop
for loop
enhanced for loop / for each loop 

// important things for Loops

1) Initilization(where to start)
2) condition(how many times)
3) Inc/dec 

--------------------------------------------


-------------
While loop
----------------

Syntax-

while(condition){
 statement;
 Inc/dec
}


Examples:-
public class WhileLoopJava {

	public static void main(String[] args) {
		
		
		int i = 1;
		
		while(i<=20) {
			
			System.out.println(i);
			 i++;
		}
	}
	
}


Examples:- 2 


int i = 1;
		
		while(i<=10) {
			
			System.out.println(i + "Hello");
			 i++;
		}





---------------------------------------------------------------------------------------------
do while loop
----------------

Syntax- 

do
{
statement;
inc/dec
}whlile(condition);


Examples:- 

int i  = 1;
		
do
{
System.out.println(i);
i++;
}while(i<=10);
	

--------------------------------------------------------------------------------------------------------------
For loop
------

Syntax-:
for(Initilization;condition; Inc/dec)
{
        Statements;
}



-------------------------------------------------------------------------------------------------------------
Day-6
--------------------------
Arrays- Arrays is collections of elements of same data type(Homogenios data).
We can store Multiple values into a single variable.
---------------------------------
type[] arrayName;
createing Arrays with variable

int a[] = new[5]

type of Arrays
--------------
1) single dimensional
2) tow dimensional/multi dimensional
-------------
single dimensional--
---------------
Basic opration an array=>>
---------------
1) Declear an Array
2) add values into Array
3) Find length of an array 
4) Read single value from an array
5) Read multiple values from an array 


Examples and approcah 


public class ArraysJava {

	public static void main(String[] args) {

		
		//  Declaring array 
		

		// approach 1
//		
//		int a[]= new int[5];
//		
//		a[0]=10;
//		a[2]=30;
//		a[3]=60;
//		a[4]=40;
//		
//		System.out.println(a[3]);
		
		// Approach 2  most preferded 
		
	int a[] = {1,2,3,4,5,6,7,8,9};
	
	// find length of an array 
	  System.out.println( "Lendth of an array:"+ a.length);
	  // read single value from an array 
	 // System.out.println( a[1]);
		
	  // reading all the value of an array 
	  
	  // Normanl for loop 
//	  for( int i=0; i<a.length-1; i++)   // i<=4 i<5 i<=a.length-1  i<a.length
//	  {
//	
//		System.out.println(a[i]);
//	  }
	  
	  // enhanced for loop . for... each loop 
	  
	  for(int x:a)
	  {
		  System.out.println(x);
	  }
	}

}



---------------------------------------------------------------------------------------------------------------------------------
tow dimensional array => We Can store data by row-and-column wise 
ex:-
row    column  value
a[0]     [0] = 100;

a[1][1] =200;
--------------------------------------------------------------------------------------------------------------------------------------

1) Declear an Array
2) add values into Array
3) Find length of an array 
4) Read single value from an array
5) Read multiple values from an array 

Examples with createing and  opration in multi dimensional array:-
--------------------------------------------------------------------------------------------------------------------------------------
public class TwoDimentionalArray {

	public static void main(String[] args) {

		//  Declearing array 
		
		// aproach1
		
//		int a[][]=new int[3][2];
//		int []a[]=new int[3][2];   you can make like this also 
//		int [][]a=new int[3][2];     you can make like this also 
		
		
//		a[0][0] =100;
//		a[0][1] =200;
//		
//		a[1][0] = 300;
//		a[1][1] = 400;
//		
//		a[2][0] = 500;
//		a[2][1] = 600;
		
		
		// Approach2 
		
		int a[][] = { {100,200},
				      {300,400},
				      {500,600},
				      {700,800} 
		                        };
		                        
		// find size of an array
		
      		System.out.println("lendth of rows:"+a.length);
      		System.out.println("lendth of columns:"+a[0].length);
		
		// read single value from an array 
      		
          System.out.println(a[2][1]);   // 600
      
      
          // normal for getting all element of array , row and column 
          for(int r=0; r<=2;r++)               // 0
          {
        	  for(int c =0; c<=1; c++)         // 0 1 2
        	  {
        		  System.out.print(a[r][c]+ " ");   // 100 200
        	  }
        	  System.out.println();
          }
          
		
	}

--------------------------------------------------------------------------------------------------------------------------------------
Day-7
--------

ex1:- Search an element in array(linear search)

Liner Search:- Every  element we are compareing 


// Finding  element in this arry 


class Main {
    public static void main(String[] args) {
     int a[] = {10,20,30,40,50};
     int seacrch_element = 30;
     boolean status= false;  // false - not found  true- found 
       
       for(int i=0; i<a.length; i++)
       {
           if(a[i]==seacrch_element)
           {
               System.out.println("Element Fount");
               status = true;
               break;
           }
       }
       if(status ==false)
       { 
           System.out.println("Element not Found");
       }
       
     
    }
}

---------------------------------------------------------------------------------------------
EX:2-
Fing number of repetations


public class FindDuplicateNum {

	public static void main(String[] args) {
		
		int a[] = {100,200,300,400,100,300,200,100};
		
		int num = 100;
		int count =0;
		
		for(int value:a)
		
		{
			
			if(value ==num)
				
			{
				count++;
			System.out.println(count);
			}
		}

	}

}

---------------------------------------------------------------------------------------------------------------------------------------
EX-3: Sorting 
// We can print numbr acc order and decning order

public class Sorting {

	public static void main(String[] args) {
	
		int a[] = {100,300,89,500,400};
		
		String b[] = {"ABC", "XYZ", "BCQ","LGTV"};
		
//	 System.out.println(Arrays.toString(a));
//		// sorting arrays 
//      Arrays.sort(a);
//      System.out.println(Arrays.toString(a));
		
		// sorting String arrays
		
		System.out.println("Before sorting String array");
		
		Arrays.sort(b);
		System.out.println("After sorting String array"+ Arrays.toString(b));
		
	}

}
------------------------------------------------------------------------------------------------------------------------------------------------------

EX:5- Print Array elements in reverse order

public class ReverseArray {

	public static void main(String[] args) {
		// Printing Reverse Arrays
		int a[] = {1,2,3,4,5,6,7,8,9,10};
            		
		
		for(int i=a.length-1;i>=0;i--)
		{
			System.out.println(a[i]);    // output 10 9,8,7,6,5,4,3,2,1
			
		}
	
	}
}


------------------------------------------------------------------------------------------------------------------------------------------------------------
Taking Input from keybord  

import java.util.Scanner;

public class HowtoReadDataInRuntime {

	public static void main(String[] args) {
		
		 // Taking inputs from keyboard  using this method
		Scanner sc = new Scanner(System.in);
		
		// for Taking input from keyboard 
		  
	/*	System.out.println("Enter the Number");
		 int num = sc.nextInt();
		 System.out.println("Given Number is: "+num);
		 */
		
		// For decimal number
	/*	System.out.println("Enter the Decimal Number");
		double num = sc.nextDouble();
		System.out.println("Given Decimal Number is:"+num);
		*/
		
		// For input String
		
		System.out.println("Enter your city Name");
		String city = sc.next();
		System.out.println("Your city is:"+ city);
		
	}

}


---------------------------------------------------------------------------------------------------------------------------------------------------------

Day-8
---------------------------
String Methods
-------------------------
String s = "Welcome";
sop(s.length());    // 5
// length() - returns length of a string(number of characters)

// concat() - joining strings 
		
	    String s1 ="hello";
	    String s2 = "world";
	    System.out.println(s1+s2);           // helloworld
	    System.out.println(s1.concat(s2));   // helloworld


System.out.println("Welcome to"+ "Java Seris");  // Welcome toJava Seris

 // trim() - remove spaces right and left side
	
	    String w = "   Welcome   ";
	System.out.println("Before triming:"+ w.length());
	System.out.println(w.trim());
	System.out.println("After  triming:"+ w.trim().length());
	
	// charAt() - returns a character from a string based on index 
	// index start from 0
	
	String r ="JavaSeliem";
	System.out.println(r.charAt(3));  // a
	System.out.println(r.charAt(0)); //J


// contains()  - returns true/false
	
	 a = "welcome";
	 
	System.out.println(a.contains("wel"));  // true
	System.out.println(a.contains("come"));  // true
	System.out.println(a.contains("Wel"));   // false
	System.out.println(a.contains("COME"));  // false
	System.out.println(a.contains("welme"));  // false
	
	
	  // equals() , equalsIngnoreCase() - compare strings
	
	a  ="welcome";
	a2 ="welcome";
	
	System.out.println(a==a2);    // true
	System.out.println(a.equals(a2)); // true
	System.out.println(a.equals("Welcome"));    // false 
	System.out.println(a.equalsIgnoreCase("Welcome")); // true
	
	
	// replace() - replce single/multiple(sequance) of characters in a string
	
	
	a ="welcome to selinum java python selinum C#";
	
	System.out.println(a.replace('e', 'X'));  // wXlcomX to sXlinum java python sXlXnum C#
	
	System.out.println(a.replace("selinum", "Playwrite"));   // welcome to Playwrite java python Playwrite C#



	 //toUpperCase()  toLowerCase
	 
	 a="Welcome";
	System.out.println(a.toUpperCase()); 
	System.out.println(a.toLowerCase()); 
	
	 
	 // split() - split the string into multiple parts based on delimeter(space, at@,etc)
	a ="abc123@gmail.com";
	
	String q[]= a.split("@");
	System.out.println(Arrays.toString(q));   // [abc123, gmail.com]
     System.out.println(q[0]);  // abc123
     System.out.println(q[1]);  //gmail.com
     
     //ex1
     String amout="$12,33,34";     // exp  123334
     
    System.out.println( amout.replace("$", ""));  // 12,33,34
    System.out.println( amout.replace("$", "").replace(",", "")); // 123334

    //ex2 
    a="abc,123@xyz";          // abc   123  xyz
    String arr[]=a.split(",");
    System.out.println(Arrays.toString(arr));  // [abc, 123@xyz]
      String arr2[]= arr[1].split("@");
      System.out.println(Arrays.toString(arr2));  // [123, xyz]
    System.out.println(arr[0]); // abc
    System.out.println(arr2[0]); //123
    System.out.println(arr2[1]); //xyz
    
    // ex3 
    a = "abc 123 zyz";
    String ar[]=a.split(" ");
    System.out.println(Arrays.toString(ar));   // [abc, 123, xyz]
    
    // * % ^ &  (  ) - you cannot use as delimeters
    
    // ex4 
    
    String name="John kendny";
     
    System.out.println(name.contains("john"));  // false
    
   System.out.println(name.replace("J", "j").contains("john"));    // true


--------------------------------------------------------------------------------------------------------------------------------------------------------------
Day-9
-----------------------------
Reverse string
------------------------------
storing string to variable  class
stirngBuffer a  = "Test";
StringBuilder a = "Test";

stirngBuffer a  = new stirngBuffer("Test");
StringBuilder a = new StringBuilder("Test");



//		String s = "Hello";
//		String rev = "";
//		
//		for(int i=s.length()-1; i>=0; i--)
//		{	
//			rev = rev+s.charAt(i);
//		}
//		
//		System.out.println("Reaversed String:"+ rev);	

		
		
		// Approach2 - without using sting method 
		
	 /*	String s = "Welcome";
		String rev = "";
		
		char a[]=s.toCharArray();
        for(int i=a.length-1;i>=0;i--) 
        {
        	rev = rev+a[i];
        	
        }
        System.out.println("Reversed string is:"+ rev);  // Reversed string is:emocleW
		*/
		
		// Approach3: Using StringBuffer Class 
		StringBuilder s = new StringBuilder("Apple");
		System.out.println("resversed string:"+ s.reverse());
----------------------------------------------------------------------------------------
immutable - we connot change
muteable - we can change
mutable can change
		
	   System.out.println(Arrays.toString(s));
       Arrays.sort(s); // mutable
      System.out.println(Arrays.toString(s));
      */ 
      // immutable 
      
      String s2 = new String("welcome");
      System.out.println(s2);  // welcome
      
      String concatstirng =  s2.concat("to java");
      
      System.out.println(s2); // welcome ----. immutable  we cannot change
      
      System.out.println(concatstirng);

-----------------------------------------------------------------------------
String - immutable, cannot change 
StringBuffer- mutable, can change
StringBuilder- mutable, can change



// String - immutable
		
		String s = "welcome";
		s.concat("to java");
		System.out.println(s);   // immutable, cannot change original value of s
		
		// StringBuffer - mutable
		
		StringBuffer s2= new StringBuffer("Hi welcome");
		s2.append("to java");
		System.out.println(s2);  // Hi welcometo java // mutable

		
		// StringBulder - mutable
		
		StringBuilder s3 = new StringBuilder("Hello");
		s3.append("world to java");
		System.out.println(s3);   // Helloworld to java  // mutable

------------------------------------------------------------------------------
String Comparison
------------
1) == equal()
2) String s ="Welcome";
  String s = new String("Welcome");

----------------------------
== its compare the objects

public class StringComparison {

	public static void main(String[] args) {
		
		// Case1
		
		 String s1 = "Welcome";
		 String s2 = "Welcome";
		 
		 System.out.println(s1==s2);  // true
		 System.out.println(s1.equals(s2)); // true
		 
		 
		 //Case2
		 String s3 = new String("Hello");
		 String s4 = new String("Hello");
		 
		System.out.println(s3 ==s4);         // false    //== its compare the objects
		System.out.println(s3.equals(s4));  // true     // Compare value of Objects 
		

		// Case3
		
		String s5 = "abc";
		String s6 = new String("abc");
		
	System.out.println(s5==s6);          // false
	System.out.println(s5.equals(s6));   // true
	
	// Case4 
	
	String a1 = "abc";
	String a2 = new String("abc");
	String a3 = a2;
	
	 System.out.println(a1 ==a2);      // false
	 System.out.println(a1.equals(a2));  // true	
	 System.out.println(a2==a3);         // true, bcoz objects are same/equal
	 System.out.println(a2.equals(a3));  // true
	 
	 System.out.println(a1==a3);          // false
	 System.out.println(a1.equals(a3)); // true
	 
		 
	}
	

}

------------------------------------------------------------------------------------------------------------------------
Day-10
---------
Objects Oriented Programming
------------
Class  - class is collections of attributtes(variable) and behavior(Methods).
Object - Object is an instance of class.

Polymorphism -
Encapsulation-
Inheritance  -
Data Abstraction-

Diffrece between Class and Objects;
------
Class:-
-----
1)Class is collections of variable and Methods.
2) Class is logical entity/blue print.
3) will not occupy space in the memory.

Syntax
clas Employe
{
	Variables
	Methods
}

--------
Object:-
----------
1) object is instance of a class/object will be created by using class.
2) object is physical entity.
3) occupy space in the memory.
4) We can create multiple objects for single class

object Syntex
Employee emp  = new Employee();
Employee emp2 = new Employee();
Employee emp3 = new Employee();
Employee emp4 = new Employee();

----------------------------------
Examples
-----
package practicejava;

public class EemployeeClass {

	// Variable 
	int eid;
	String empName;
	int sal;
	String job;
	
	
	//Methods 
	// if want nothing return any type than use void 

	void display()
	{
	System.out.println( "Employee name:"+empName);	
	System.out.println(eid);	
	System.out.println(sal);
	System.out.println(job);
	
	
	
	}
	
	
	
	

	
	public static void main(String[] args) 
	
	{
		EemployeeClass emp1  = new EemployeeClass(); // object
        emp1.eid=101;
        emp1.empName="jhon";
        emp1.job="manager";
        emp1.sal=50000;
        emp1.display();
        
        
        EemployeeClass emp2 = new EemployeeClass();  
        emp2.eid=23423;
        emp2.job="Developer";
        emp2.sal=4554;
        emp2.empName="dey";
        
        //System.out.println(emp2.empName);
    
        emp2.display();
        
	}

}

----------------------------------------------------------------------------
Day-11
------
Methods - block or group of stataements which will perfrom certain task 
          we have to call the method though object.

1) No params  No return value
2) no pramas  No return value
3) Takes params   No return values
4) Takes pramas Returns value

String s = new String("welcome");

int len = s.lendth()  --no params,  return value 
String sub =s.substring(2,5)

---------------------------------

Examples:- 

package day11;

public class Greetings {
	
// 1) No params No retrun value 
	
 void m1()
{
	System.out.println("Hello....");
	
}
	// 2) No params Retrun value
 String m2()
 {
	 return("Hello how are you there??");
 }
 
 // 3) Takes params No return value 
 
   void m3(String name)
 {
	 
 System.out.println("Hi"+ name);
 }
 
   // 4) Takes params and  return values 
   
   String m4(String name)
   {
	   return("Hello"+ name);
	   
   }
}


---------------------

package day11;

public class GreetingMainclss {

	public static void main(String[] args)
	
	{
		
		 Greetings gr = new  Greetings();
		 
		gr.m1();  // 1 
        String s = gr.m2();     // 2
        System.out.println(s); // 3
        
        gr.m3("Jhon");
        
       String s2 = gr.m4("Avnish");   // 4
       System.out.println(s2);
	}

}
---------------------------------------
How many ways we can store data into variable
-----------------
1) By using object reference variable
2) Method
3) Constructors 

What is the Diffrece between Constructors and Method?
Method:
--------
1) Method name can be anything
2) Method may or may not return a value
3) if method is ot returning any value then specify void
4) Method can take parameters/ arguments
5) We have to invoke/call Methods explicitely through object
6) used for specifiing logic

Constructors:
------------
1) Constructors name should be same as class name.
2) Constructors will never retrun a value (not evn void)
3) We don't specify teh void
4) Constructors can take parameters/arguments 
5) Constructors automatically invoke at the time of object creation.
6) used for Initilization the value of the variable

------------------------------------------------------------------------------------------------


package day11;

public class StudentClass {

	int sid;
	String sname;
	char grade;
	
	void printStudentData()
	{
		System.out.println(sid+ ""+ sname);
	}
	
	void setStudentData(int id, String name, char gr)
	{
		sid =id;
		sname=name;
		grade=gr;
		
	}
	
	StudentClass(int id, String name, char gr)
	{
		sid =id;
		sname=name;
		grade=gr;
		
	}
}








package day11;

public class StudentMain {

	public static void main(String[] args) 
	
	{
		// StudentClass stu = new StudentClass();
		
		// 1) using object refrence variable , storing data
         // class variable 
		
		/* stu.sid=345;
         stu.grade ='A';
         stu.sname ="Ram";
         
         stu.printStudentData();
         */ 
		
		//  2) Using method 
		 // stu.setStudentData(100, "David", 'C');  // local variable 
         
		 // stu.printStudentData();
		
		
		// 3) Using constructor
	
		StudentClass stu = new StudentClass(100,"Mohan",'e');
		
		stu.printStudentData();
		
	}

}

-------------------------------------------------------
Types of Constructors 
---------------------
1) Default Constructors   
ex:- 

public clas ConstructorsDemo{
int x,y;

ConstructorsDemo  //  Default Constructors
{
  x=100;
  y=300;
}

}

2) Parameerized Constructors
ex:-
ConstructorsDemo(int a, int b )  //  Parameerized Constructors
{
	x=a;
	y=b;

}

void sum()
{
	System.out.println(x+y)
}


public static void main(String[] args){

}



---------------------------------------------------------------------------------------------------------------------------------------
Day-12
-----
Polymorphism:- One thing can have many forms.

we can achive Polymorphism using overloading.
ex-
void m1()
void m1()
void m1()

4 Rules are applicalble
1) Method names should be same.
2) Number of parameters should be Diffrent.
3) Data type of parameters should be Diffrent.
4) Order of parameters should be Diffrent.


Examples:-

package day12;

public class adder {
	
int a =10, b=20;

void sum()  // 1
{
	System.out.println(a+b);
}

void sum(int x,int y)     // 2
{
	System.out.println(x+y);
}

void sum(int x,double y)     // 3
{
	System.out.println(x+y);
}

void sum(double x, int y)     // 4
{
	System.out.println(x+y);
}

}

--------------------------------------------------------------------------

Encapsulation:- Wrapping up of data and Methods in to single unit(class).
-------
1) All variable should be private.
2) For every variable there should be 2 methods(get & set).
3) Variable can be oprated only thourgh methods.


Examples:-

package day12;

public class AccountMain {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		Account acc = new Account();
	
		acc.setAccno(101);
		acc.setAmount(3000);
		acc.setName("Jhon");
		
		
	 System.out.println(acc.accno);
	 System.out.println(acc.amount);
	 System.out.println(acc.name);
	 
	}

-----------------------------------------------------------------------------
Overloading
-----------
Examples:-
---
package day12;

public class OverloadingMainMethod {

	 void main(int x)
	 {
		 System.out.println(x);
	 }
	
	 void main(String s)
	 {
		 System.out.println(s);
	 }
	  void main(String s1, String s2)
	  {
		  System.out.println(s1+s2);
	  }
	

	
	public static void main(String[] args)
	{		
	
		OverloadingMainMethod ov = new OverloadingMainMethod();
		ov.main(100);
		ov.main("Hello");
		ov.main("hi","Jhon");
		
	}

}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



